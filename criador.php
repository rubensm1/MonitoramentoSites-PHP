<?php class DataBaseConfig{ const BANCO = 'criador'; const USER = 'root'; const PASS = ''; const HOST = 'localhost'; const PORT = 3306; } /* * Classe de Conexão - Reponsavel por todos os acessos ao banco. */ /* * pegando as configurações do banco */ class Connexao { private $conexao; private $resultado; function Connexao($database = DataBaseConfig::BANCO, $host = DataBaseConfig::HOST, $port = DataBaseConfig::PORT, $user = DataBaseConfig::USER, $pass = DataBaseConfig::PASS) { try { if ($pass == '') $this->conexao = new PDO('mysql:host=' . $host . ';port=' . $port . ';dbname=' . $database, $user); else $this->conexao = new PDO('mysql:host=' . $host . ';port=' . $port . ';dbname=' . $database, $user, $pass); $this->conexao->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); } catch (Exception $e) { echo "<h1 style='text-align: center;'>Erro de Conexão com o banco de dados!</h1> <br /> <h2 style='text-align: center;'>Talvez o banco de dados não está instalado, Tente adicionar ao hiperlink: '/criador.php?install'</h2>"; } } public static function getEstruturaTableDatabase($table, $database = DataBaseConfig::BANCO, $host = DataBaseConfig::HOST, $port = DataBaseConfig::PORT, $user = DataBaseConfig::USER, $pass = DataBaseConfig::PASS) { $conn = new Connexao ($database, $host, $port, $user, $pass); $conn->query("DESC $table;"); $conn->execute(); $ret = $conn->fetchObjAll(); $conn->close(); return $ret; } /** * <b>Methodo</b> * Cria o banco de dados */ public static function createDataBase($database = DataBaseConfig::BANCO, $host = DataBaseConfig::HOST, $port = DataBaseConfig::PORT, $user = DataBaseConfig::USER, $pass = DataBaseConfig::PASS) { $link = mysql_connect($host . ":" . $port, $user, $pass); if (!$link || !mysql_ping($link)) throw new Exception("Falha na conexão com o banco de dados. <br/> Certifique-se de que o usuário e senha estão corretos. <br/> Verifique as permissões do usuário do banco."); self::mysql_install_db($database, 'criador.sql'); } /** * Cria o banco de dados * @param String $dbname Nome do banco de dados * @param String $dbsqlfile Caminho para o arquivo <b>".sql"</b> com a estrutura do banco */ private static function mysql_install_db($dbname, $dbsqlfile) { if (!mysql_query("DROP DATABASE IF EXISTS $dbname")) /* Exclui o banco caso já exista */ throw new Exception("Falha ao remover o banco  de dados[$dbname]."); if (!mysql_query("CREATE DATABASE $dbname"))  /* Cria o banco */ throw new Exception("Não foi possivel criar o banco  de dados[$dbname]. <br/> Verifique as permissões do usuário do banco."); if (!mysql_select_db($dbname)) /* Seleciona o banco */ throw new Exception( "Não foi possivel selecionar o banco de dados [$dbname]"); return self::mysql_import_file($dbsqlfile); } /** * Faz a importação da estrutura do banco de dados * @param String $filename Nome do arquivo de importação * @param *String $errmsg Variavel que recebe a mensagem de erro */ private static function mysql_import_file($filename) { /* Le o arquivo */ $lines = file($filename); if (!$lines) throw new Exception ("Não foi possivel encontrar o arquivo $filename"); $scriptfile = false; /* Retira os comentários e cria uma unica linha */ foreach ($lines as $line) { $line = trim($line); if (strlen($line) > 0 && !preg_match('/^--/', $line)) { if ($line [strlen($line) -1] == ";") $scriptfile.= $line . "$@@@"; else $scriptfile.= $line . " "; } } if (!$scriptfile) throw new Exception("Arquivo invalido $filename"); /* divide a linha em comandos menores */ $queries = explode('$@@@', $scriptfile); /* Executa todos os comandos sqls */ foreach ($queries as $query) { $query = trim($query); if ($query == "") continue; if (!mysql_query($query . ';')) throw new Exception("query " . $query . " falhou"); } } /** * Prepara a query SQL * @param String $sql Query Sql a ser preparada */ public function query($sql) { $this->resultado = $this->conexao->prepare($sql); } /** * Executa a query com os dados * @param Array $dados Dados necessarios para execução da query.<br/> * Pode ser Nulo ou vazio. */ public function execute($dados = NULL) { $this->resultado->execute($dados); } /** * Pega uma linha do resultado da consulta sql e retorna como objeto. * @return Object obj O objeto de uma linha da consulta. */ public function fetchObj() { return $this->resultado->fetch(PDO::FETCH_OBJ); } /** * Retorna uma linha do resultado da consulta. * @return Array uma linha do resultado da consulta */ public function fetch() { return $this->resultado->fetch(); } /** * Retorna todo o resultado da consulta em um Array * @return Array Todas a linhas resultantes da consulta. */ public function fetchAll() { return $this->resultado->fetchAll(); } /** * Retorna todo o resultado da consulta em um Array de Objetos * @return Array Todas a linhas resultantes da consulta em forma de Objetos. */ public function fetchObjAll() { return $this->resultado->fetchAll(PDO::FETCH_OBJ); } /** * Prepara a query sql, executa e retorna o dado * @param String $sql Consulta SQL. * @param Array $dados dados necessários para execução da query. * @return Array uma linha do resultado da consulta. */ public function executeQuery($sql, $dados = array()) { $this->query($sql); $this->execute($dados); return $this->fetch(); } /** * Prepara a query sql, executa e retorna os dados * @param String $sql Consulta SQL. * @param Array $dados dados necessários para execução da query. * @return Array Todas a linhas resultantes da consulta. */ public function executeQueryAll($sql, $dados = array()) { $this->query($sql); $this->execute($dados); return $this->fetchAll(); } /** * Prepara a query sql, executa e retorna os dados * @param String $sql Consulta SQL. * @param Array $dados dados necessários para execução da query. * @return Array Todas a linhas resultantes da consulta. */ public function executeQueryObjectAll($sql, $dados = array()) { $this->query($sql); $this->execute($dados); return $this->fetchObjAll(); } public function getColunasTable($table) { $this->query("DESC $table;"); $this->execute(); return $this->fetchAll(); } /** * Fecha a conexão. */ public function close() { $this->conexao = NULL; } } if (isset ($_GET['install']) ) { try { Connexao::createDataBase(); } catch (Exception $e) { echo '<table class="xdebug-error" dir="ltr" border="1" cellspacing="0" cellpadding="1">'; echo $e->xdebug_message; echo "</table>"; exit; } header("Location:criador.php"); } if ( !isset($_POST['ajax']) || strtolower($_POST['ajax']) == "false" || !$_POST['ajax']) { ?> <!DOCTYPE HTML> <html lang="pt-br"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1"> <title>Criador</title> <style type="text/css"> input[type='checkbox'] { width: 20px; height: 20px; margin: 0px; margin-top: 1px; vertical-align: bottom; } .table-bordered td, .table-bordered th { border: solid 1px #BBB; } </style> </head> <?php } abstract class Model implements JsonSerializable { protected static $conexao; protected static $useTable = FALSE; protected static $estrutura = array("id" => "int"); protected $id; function Model($id = 0) { $class = get_class($this); if ($class::$useTable || $class == "Model") { self::init(); $this->id = $id; } } public static function init() { if (self::$conexao == NULL) self::$conexao = new Connexao(); } public function getId() { return $this->id; } public function setId($id) { $this->id = $id; } /** * Seleciona o ultimo ID da tabela */ public static function lastID() { $class = get_called_class(); $sql = 'SELECT MAX(id) as id FROM ' . $class::$useTable . ';'; return ((int) self::$conexao->executeQuery($sql)['id']); } public static function load($id = 1) { $class = get_called_class(); $sql = 'SELECT * FROM ' . $class::$useTable . ' WHERE id = :id'; $result = self::$conexao->executeQuery($sql, array("id" => $id)); if ($result) return new $class($result); else return NULL; } public static function select($campos = NULL, $valores = NULL, $orderBy = NULL, $groupBy = NULL, $limit = NULL) { $sql = self::geraSelect($campos, $valores); if ($orderBy) $sql .= " ORDER BY $orderBy"; if ($groupBy) $sql .= " GROUP BY $groupBy"; if ($limit) $sql .= " LIMIT $limit"; $keys = array_keys($valores); foreach ($keys as $key) if ($valores[$key] === NULL) unset($valores[$key]); return self::$conexao->executeQueryAll($sql, $valores); } public static function loadList($valores = NULL, $orderBy = NULL, $groupBy = NULL, $limit = NULL) { $class = get_called_class(); $generics = $class::select(NULL, $valores, $orderBy, $groupBy, $limit); $models = array(); foreach ($generics as $generic) if ( isset($generic['id']) ) $models[(int) $generic['id']] = new $class($generic); else $models[] = new $class($generic); return $models; } public function persist() { $class = get_class($this); if ($class::$useTable == FALSE) return FALSE; $obj = $class::load($this->id); $valores = $this->toArray(); if ($obj) $sql = self::geraUpdate($valores); else { unset($valores['id']); $sql = self::geraInsert($valores); } self::$conexao->query($sql); self::$conexao->execute($valores); if (!$obj) $obj = $class::load($class::lastId()); return $obj; } public function delete() { $class = get_class($this); if ($class::$useTable == FALSE) return FALSE; if ($class::load($this->id)) $sql = self::geraDelete(array('id' => $this->id)); return $sql; } /** * Seleciona todos os campos da tabela referente ao modelo. * @return Array resultado da consulta */ public static function all($limit = 0) { $class = get_called_class(); $sql = 'SELECT * FROM ' . $class::$useTable . ' ORDER BY id' . ($limit ? " LIMIT $limit" : ""); $consulta = self::$conexao->executeQueryAll($sql); $lista = array(); foreach ($consulta as $result) $lista[$result['id']] = new $class($result); return $lista; } /** * Seleciona todos os campos da tabela referente ao modelo. * @return Array resultado da consulta */ public static function allMap($limit = 0) { $class = get_called_class(); $sql = 'SELECT * FROM ' . $class::$useTable . ' ORDER BY id' . ($limit ? " LIMIT $limit" : ""); $consulta = self::$conexao->executeQueryObjectAll($sql); $lista = array(); foreach ($consulta as $result) $lista[$result->id] = $result; return $lista; } /** * Seleciona todos os ids da tabela referente ao modelo. * @return Array resultado da consulta */ public static function allIds() { $class = get_called_class(); $sql = 'SELECT id FROM ' . $class::$useTable . ' ORDER BY id'; $consulta = self::$conexao->executeQueryAll($sql); $lista = array(); foreach ($consulta as $result) $lista[] = $result['id']; return $lista; } public static function nativeQuery($sql) { return self::$conexao->executeQueryObjectAll($sql); } private function geraColunasQuery() { $class = get_class($this); $colunasQuery = ""; foreach ($class::$estrutura as $coluna => $tipo) $colunasQuery .= "," . $coluna; return substr($colunasQuery, 1); } public static function consultaNomeColunas() { $class = get_called_class(); $table = $class::$useTable; $colunsNames = array(); $resultado = self::$conexao->getColunasTable($table); /* while ($linha = mysqli_fetch_array($resultado,MYSQLI_ASSOC)) { array_push($colunsNames, $linha['Field']); if ($linha['Key'] == 'PRI') array_push($primaryKey, "<KEY>".$linha['Field']."</KEY>"); } return $colunsNames; */ return $resultado; } /** * Gera Query SQL Select<br/> * @param Array\String $campos Array ou String * com os campos que serão selecionados na consulta.<br/> * Se $campos for Nulo todos os campos são selecionados. <br/> */ private static function geraSelect($campos = null, $where = array()) { $class = get_called_class(); $sql = 'SELECT '; if (is_array($campos)) { $campos = implode(",", array_keys($campos)); } if ($campos != null) { $sql .= $campos; /* caso tenha algum campo insere no sql */ } else { $sql .= '*'; /* Caso não tenha um campo especificado selecionara todos */ } $sql .= ' FROM ' . $class::$useTable; if (!empty($where)) { $sql .= ' WHERE '; $i = FALSE; foreach ($where as $key => $value) { /* cria os parametros */ if ($value === NULL) continue; if ($i) $sql .= ' AND '; else $i = TRUE; $sql .= $key . ' = :' . $key; } } return $sql; } /** * Gera o WHERE dos <b>SQL's</b> <br/> * Utiliza os campos desfinidos no atributo <b>data</b><br/> */ private static function geraWhere($data) { $sql = ''; if (!empty($data)) { $sql .= ' WHERE '; $i = 0; foreach ($data as $key => $value) { /* cria parametros do sql */ $num = count($data); $sql .= $key . ' = :' . $key; if ($i < $num - 1) $sql .= ' AND '; $i++; } } return $sql; } /** * Gera Query SQL Insert */ private static function geraInsert($data) { $class = get_called_class(); $num = count($data); $i = 0; $valores = $num == 1 ? 'VALUE (' : 'VALUES ('; $sql = 'INSERT INTO ' . $class::$useTable . ' ( '; foreach ($data as $key => $value) {/* cria os parametros */ $sql .= $key; if ($i < $num - 1) $sql .= ', '; $valores .= ':' . $key; if ($i < $num - 1) $valores .= ', '; $i++; } $valores .= ' );'; $sql .= ' ) ' . $valores; return $sql; } /** * Gera Query SQL UPDATE */ private static function geraUpdate($data) { $class = get_called_class(); unset($data['id']); $num = count($data); $i = 0; $sql = 'UPDATE ' . $class::$useTable . ' SET '; foreach ($data as $key => $value) {/* cria os parametros */ $sql .= $key . ' = :' . $key; if ($i < $num - 1) $sql .= ', '; $i++; } $sql .= ' WHERE id = :id'; return $sql; } /** * Gera Query SQL DELETE <br/> */ private static function geraDelete($where) { $class = get_called_class(); $sql = 'DELETE FROM ' . $class::$useTable; if (!empty($where)) { $sql .= self::geraWhere($where); /* Gera o where */ } return $sql; } public static function htmlTable($limit = 0) { $class = get_called_class(); $sql = 'SELECT * FROM ' . $class::$useTable . ' ORDER BY id' . ($limit ? " LIMIT $limit" : ""); $consulta = self::$conexao->executeQueryAll($sql); $colunasBD = $class::consultaNomeColunas(); $colunas = array(); $html = '<table class="table table-bordered"><thead><tr>'; foreach ($colunasBD as $key => $value) { $html .= "<th>" . ($value["Key"] == "PRI" ? "<u>" . $value["Field"] . "</u>" : $value["Field"]) . "</th>"; $colunas[] = $value["Field"]; } $html .= "<th>X</th>"; $html .= '</tr></thead><tbody>'; foreach ($consulta as $result) { $html .= "<tr>"; foreach ($colunas as $header) { $html .= "<td>" . $result[$header] . "</td>"; } $botao = '<td><form action="criador.php?c=submain&p='.$class.'" method="POST" target="paineis"><input type="hidden" name="id" value="'.$result["id"].'" /><input type="submit" value="Selecionar"/></form></td>'; $html .= $botao."</tr>"; } return $html . "</tbody></table>"; } public function jsonSerialize() { return (object) $this->toArray(); } public function toArray() { return get_object_vars($this); } } /** * Classe Funcao */ class Funcao extends Model { protected static $useTable = "funcao"; private $nome; function Funcao($data = NULL) { if ($data != NULL) { parent::__construct(isset($data['id']) && $data['id'] != '' ? (int) $data['id'] : NULL); $this->nome = isset($data['nome']) && $data['nome'] != '' ? $data['nome'] : NULL; } else parent::__construct(); } public function getId() { return $this->id; } public function getNome() { return $this->nome; } public function toArray() { return get_object_vars($this); } } /** * Classe Comando */ class Comando extends Model { protected static $useTable = "comando"; private $ordem; private $funcao_id; private $comando; function Comando($data = NULL) { if ($data != NULL) { parent::__construct(isset($data['id']) && $data['id'] != '' ? (int) $data['id'] : NULL); $this->ordem = isset($data['ordem']) && $data['ordem'] != '' ? (int) $data['ordem'] : NULL; $this->funcao_id = isset($data['funcao_id']) && $data['funcao_id'] != '' ? (int) $data['funcao_id'] : NULL; $this->comando = isset($data['comando']) && $data['comando'] != '' ? utf8_encode($data['comando']) : NULL; } else parent::__construct(); } public function getOrdem() { return $this->ordem; } public function getFuncaoId() { return $this->funcao_id; } public function getComando() { return $this->comando; } public function aplicarNomeClasse($nomeClasse) { if (PHP_OS == "WINNT") $this->comando = str_replace("/","\\", $this->comando); $this->comando = str_replace(array("A@@@","a@@@"),array( ucfirst(strtolower($nomeClasse)),strtolower($nomeClasse) ), $this->comando); } public function toArray() { return get_object_vars($this); } } /** * Classe Arquivo */ class Arquivo extends Model { protected static $useTable = "arquivo"; private $nome; private $funcao_id; private $conteudo; function Arquivo($data = NULL) { if ($data != NULL) { parent::__construct(isset($data['id']) && $data['id'] != '' ? (int) $data['id'] : NULL); $this->nome = isset($data['nome']) && $data['nome'] != '' ? utf8_encode($data['nome']) : NULL; $this->funcao_id = isset($data['funcao_id']) && $data['funcao_id'] != '' ? (int) $data['funcao_id'] : NULL; $this->conteudo = isset($data['conteudo']) && $data['conteudo'] != '' ? utf8_encode($data['conteudo']) : NULL; } else parent::__construct(); } public function getNome() { return $this->nome; } public function getFuncaoId() { return $this->funcao_id; } public function getConteudo() { return $this->conteudo; } public function aplicarNomeClasse($nomeClasse) { $this->nome = str_replace(array("A@@@","a@@@"),array(ucfirst(strtolower($nomeClasse)),strtolower($nomeClasse)),$this->nome); $this->conteudo = str_replace(array("A@@@","a@@@"),array(ucfirst(strtolower($nomeClasse)),strtolower($nomeClasse)),$this->conteudo); } public function aplicarCampos($campos = array()) { /*$campos = array(); $campos[] = new Campo("string","informacao"); $campos[] = new Campo("int","ordem"); $campos[] = new Campo("text","descricao", FALSE); $campos[] = new Campo("enum","familia",FALSE,array("Tipo 1", "Tipo 2", "Tipo 3"));*/ $subs = array("","","",""); foreach ($campos as $c){ $subs[0] .= $c->toPhpF() . "\n    "; $subs[1] .= $c->toPhpC() . "\n            "; $subs[2] .= $c->toJs() . "\n        "; $subs[3] .= $c->toHtml() . "\n        "; } $this->conteudo = str_replace(array("M@@@","m@@@","j@@@","h@@@"),$subs,$this->conteudo); } public function toArray() { return get_object_vars($this); } } class Campo { private $tipo; private $nome; private $required; private $options; public function Campo($data) { $this->tipo = isset($data['tipo']) && $data['tipo'] != '' ? strtolower($data['tipo']) : NULL; $this->nome = isset($data['nome']) && $data['nome'] != '' ? $data['nome'] : NULL; $this->required = isset($data["required"]) ? ( strtolower($data["required"]) == "false" || $data["required"] == "0" ? FALSE : (boolean) $data["required"]) : NULL; $this->options = isset($data['options']) && $data['options'] != '' ? $data['options'] : NULL; } public static function getCampoId() { return new Campo( array( 'tipo' => 'int', 'nome' => 'id', 'required' => TRUE, 'options' => NULL )); } public static function getCampoDefault() { return new Campo( array( 'tipo' => 'default', 'nome' => '', 'required' => FALSE, 'options' => NULL )); } public function toHtml() { switch ($this->tipo) { case "text": return '<tr><td>'. $this->nome .':</td><td><textarea name="'. $this->nome .'" '. ($this->required ? "required" : "") .'></textarea></td></tr>'; case "number": case "int": return '<tr><td>'. $this->nome .':</td><td><input type="number" name="'. $this->nome .'" value="" '. ($this->required ? "required" : "") .' /></td></tr>'; case "boolean": return '<tr><td>'. $this->nome .':</td><td><input type="checkbox" name="'. $this->nome .'" value="true" /></td></tr>'; case "date": return '<tr><td>'. $this->nome .':</td><td><input type="date" name="'. $this->nome .'" value="'. date("Y-m-d") .'" '. ($this->required ? "required" : "") .' /></td></tr>'; case "time": return '<tr><td>'. $this->nome .':</td><td><input type="text" name="'. $this->nome .'" pattern="[0-9]{1,2}:[0-5][0-9]:[0-5][0-9]$" title="0:00:00 ~ 99:59:59" value="0:00:00" '. ($this->required ? "required" : "") .' /></td></tr>'; case "enum": $field = '<tr><td>'. $this->nome .':</td><td><select name="'. $this->nome .'" '. ($this->required ? "required" : "") .'><option value=""></option>'; if ($this->options) foreach ($this->options as $option) $field .= '<option value="'. $option .'">'. $option .'</option>'; return $field . '</select></td></tr>'; default: return '<tr><td>'. $this->nome .':</td><td><input type="text" name="'. $this->nome .'" value="" '. ($this->required ? "required" : "") .' /></td></tr>'; } } public function toPhpF() { return 'private $' . $this->nome . ";"; } public function toPhpC() { switch ($this->tipo) { case "number": return '$this->'. $this->nome .' = isset($data["'. $this->nome .'"]) && $data["'. $this->nome .'"] != "" ? (float) $data["'. $this->nome .'"] : NULL;'; case "int": return '$this->'. $this->nome .' = isset($data["'. $this->nome .'"]) && $data["'. $this->nome .'"] != "" ? (int) $data["'. $this->nome .'"] : NULL;'; case "boolean": return '$this->'. $this->nome .' = isset($data["'. $this->nome .'"]) ? ( strtolower($data["'. $this->nome .'"]) == "false" || $data["'. $this->nome .'"] == "0" ? FALSE : (boolean)$data["'. $this->nome .'"]) : NULL;'; /*case "date": return '$this->'. $this->nome .' = isset($data["'. $this->nome .'"]) && $data["'. $this->nome .'"] != "" ? $data["'. $this->nome .'"] : NULL;'; case "time": return '$this->'. $this->nome .' = isset($data["'. $this->nome .'"]) && $data["'. $this->nome .'"] != "" ? $data["'. $this->nome .'"] : NULL;';*/ default: return '$this->'. $this->nome .' = isset($data["'. $this->nome .'"]) && $data["'. $this->nome .'"] != "" ? $data["'. $this->nome .'"] : NULL;'; } } public function toJs() { switch ($this->tipo) { case "number": return 'this.'. $this->nome .' = parseFloat(data["'. $this->nome .'"]);'; case "int": return 'this.'. $this->nome .' = parseInt(data["'. $this->nome .'"]);'; case "boolean": return 'this.'. $this->nome .' = data["'. $this->nome .'"] ? (data["'. $this->nome .'"] == "false" || data["'. $this->nome .'"] == "0" ? false : true) : false;'; case "date": return 'this.'. $this->nome .' = new Date(data["'. $this->nome .'"]);'; case "time": return 'this.'. $this->nome .' = data["'. $this->nome .'"];'; default: return 'this.'. $this->nome .' = data["'. $this->nome .'"];'; } } public function toSql() { switch ($this->tipo) { case "text": return $this->nome .' TEXT' . ($this->required ? ' NOT NULL' : ''); case "number": return $this->nome .' FLOAT' . ($this->required ? ' NOT NULL' : ''); case "int": return $this->nome .' INT' . ($this->required ? ' NOT NULL' : ''); case "boolean": return $this->nome .' BOOLEAN' . ($this->required ? ' NOT NULL' : ''); case "date": return $this->nome .' DATE' . ($this->required ? ' NOT NULL' : ''); case "time": return $this->nome .' TIME' . ($this->required ? ' NOT NULL' : ''); case "enum": $field = $this->nome . ' ENUM('; if ($this->options) { foreach ($this->options as $option) $field .= "'" . $option . "',"; $field[strlen($field) -1] = ')'; } else $field .= ')'; return $field . ($this->required ? ' NOT NULL' : ''); default: return $this->nome .' VARCHAR(64)' . ($this->required ? ' NOT NULL' : ''); } } public function toForm($disabled = FALSE) { $tr =   "<td>" . "<select class=\"campo-tipo\" onchange=\"campoTipoChange(event);\" ". ($disabled ? " disabled" : "") .">" . "<option title=\"Para texto comum\" value=\"default\" ". ($this->tipo == 'default' ? " selected" : "") .">default</option>" . "<option title=\"Para texto longo\" value=\"text\"". ($this->tipo == 'text' ? " selected" : "") .">text</option>" . "<option value=\"int\"". ($this->tipo == 'int' ? " selected" : "") .">int</option>" . "<option value=\"number\"". ($this->tipo == 'number' ? " selected" : "") .">number</option>" . "<option value=\"boolean\"". ($this->tipo == 'boolean' ? " selected" : "") .">boolean</option>" . "<option value=\"date\"". ($this->tipo == 'date' ? " selected" : "") .">date</option>" . "<option value=\"time\"". ($this->tipo == 'time' ? " selected" : "") .">time</option>" . "<option value=\"enum\"". ($this->tipo == 'enum' ? " selected" : "") .">enum</option>" . "</select>" . "</td>" . "<td><input type=\"text\" class=\"campo-nome\" value=\"". $this->nome ."\" required". ($disabled ? " disabled" : "") ." /></td>" . "<td style=\"text-align: center; vertical-align: middle;\"><input type=\"checkbox\" class=\"campo-required\"" . ($this->required ? " checked" : "") . "". ($disabled ? " disabled" : "") ." /></td>" . "<td></td>" . "<td><button". ($disabled ? " disabled" : "") ." onclick=\"this.parentElement.parentElement.remove()\">X</button></td>"; return $tr; } public function toEnumForm($disabled = FALSE) { $table =   "<table>" . "<tbody>" . "<tr>" . "<td><input type=\"text\" class=\"campo-options\" value=\"\"". ($disabled ? " disabled" : "") ." /></td>" . "<td><button". ($disabled ? " disabled" : "") ." onclick=\"campoEnumTrAcaoBotaoAdd(event, this);\">+</button></td>" . "</tr>" . "</tbody>" . "</table>"; return $table; } public function toEnumTrForm($disabled = FALSE) { $tr =   "<td><input type=\"text\" class=\"campo-options\" value=\"\" required". ($disabled ? " disabled" : "") ." /></td>" . "<td><button". ($disabled ? " disabled" : "") ." onclick=\"campoEnumTrAcaoBotaoRemove(event,this);\">X</button></td>"; return $tr; } } Model::init(); function escreverArquivo($nomeArquivo, $conteudo) { $file = fopen($nomeArquivo, 'w'); if (!$file) throw new Exception ("Falha ao abrir o arquivo $nomeArquivo"); if (fwrite($file, $conteudo) === FALSE) throw new Exception("Falha ao escrever no arquivo $nomeArquivo"); if (!fclose($file)) throw new Exception ("Falha ao fechar o arquivo $nomeArquivo"); } if (isset ($_GET['c'])) { switch ($_GET['c']) { case "funcao": if (isset ($_POST['nome'])) { $funcao = new Funcao ($_POST); $funcao = $funcao->persist(); var_dump($funcao); } else echo "<br />Falha na Inserção, faltam atributos<br />"; break; case "f": echo Funcao::htmlTable(); break; case "comando": if ( isset ($_POST['ordem']) && isset ($_POST['funcao_id'])  && isset ($_POST['comando'])) { $comando = new Comando ($_POST); $comando = $comando->persist(); var_dump($comando); } else echo "<br />Falha na Inserção, faltam atributos<br />"; break; case "c": echo Comando::htmlTable(); break; case "arquivo": if (isset ($_POST['nome']) && isset ($_POST['conteudo']) && isset ($_POST['funcao_id'])) { $arquivo = new Arquivo ($_POST); $arquivo = $arquivo->persist(); var_dump($arquivo); } else echo "<br />Falha na Inserção, faltam atributos<br />"; break; case "a": echo Arquivo::htmlTable(); break; case "criar": if (isset ($_POST['classe']) && isset ($_POST['funcao_id'])  ) { $comandos = Comando::loadList(array('funcao_id'=>$_POST['funcao_id']), 'ordem'); $arquivos = Arquivo::loadList(array('funcao_id'=>$_POST['funcao_id'])); $campos = array(); if (isset ($_POST['campos'])) foreach (json_decode($_POST['campos']) as $cp) $campos[] = new Campo((array)$cp); foreach ($arquivos as $arquivo){ $arquivo->aplicarNomeClasse($_POST['classe']); $arquivo->aplicarCampos($campos); $arquivosMap[$arquivo->getNome()] = $arquivo; } foreach ($comandos as $comando){ $comando->aplicarNomeClasse($_POST['classe']); eval ($comando->getComando()); } echo "<h1>Criado!</h1>"; } else echo "<br />Falha na Criação, Classe não definida<br />"; break; case "sql": if (isset ($_POST['classe']) ) { $table = 'CREATE TABLE '.ucfirst(strtolower($_POST['classe']))." (\n"; $table .= "    id INT PRIMARY KEY AUTO_INCREMENT,\n"; if (isset ($_POST['campos'])) foreach (json_decode($_POST['campos']) as $cp) $table .= "    " . (new Campo((array)$cp))->toSql() . ",\n"; $table[strlen($table) -2] = "\n"; $table[strlen($table) -1] = ")"; echo "<pre>".$table."</pre>"; } else echo "<br />Falha na geração, Classe não definida<br />"; break; case "getSQL": if (isset ($_POST['table']) && $_POST['table'] != '' ) { echo json_encode(Connexao::getEstruturaTableDatabase( $_POST['table'], (isset ($_POST['database']) && $_POST['database'] != '' ? $_POST['database'] : DataBaseConfig::BANCO ), (isset ($_POST['host']) && $_POST['host'] != '' ? $_POST['host'] : DataBaseConfig::HOST ), (isset ($_POST['port']) && $_POST['port'] != '' ? $_POST['port'] : DataBaseConfig::PORT ), (isset ($_POST['user']) && $_POST['user'] != '' ? $_POST['user'] : DataBaseConfig::USER ), (isset ($_POST['pass']) ? $_POST['pass'] : DataBaseConfig::PASS ) )); } else echo "<br />Falha na geração, Classe não definida<br />"; break; case "getCampos": $campos = array(); if (isset ($_POST['campos'])) foreach (json_decode($_POST['campos']) as $cp) { if ( strtolower($cp->nome) == 'id') $campos[] = (new Campo((array)$cp))->toForm(true); else $campos[] = (new Campo((array)$cp))->toForm(); } echo json_encode($campos); break; case "main": ?> <body> <table style="text-align: center; margin: auto; "> <tr> <td> <form action="criador.php?c=submain&p=funcao" method="POST" target="paineis"><input type="submit" value="Função" /></form> </td> <td> <form action="criador.php?c=submain&p=comando" method="POST" target="paineis"><input type="submit" value="Comando" /></form> </td> <td> <form action="criador.php?c=submain&p=arquivo" method="POST" target="paineis"><input type="submit" value="Arquivo" /></form> </td> </tr> <tr> <td colspan="3"> <form action="criador.php?c=submain&p=criar" method="POST" target="paineis"><input style="width: 100%;" type="submit" value="Criar"></form> </td> </tr> </table> </body> <?php break; case "submain": ?> <body> <?php if (isset($_GET['p'])) { switch ($_GET['p']) { case "funcao": case "Funcao": $funcao = new Funcao(); if (isset ($_POST['id'])) $funcao = Funcao::load( (int) $_POST['id'] ); ?> <div id="funcao-form"> <b>Função:</b> <form action="criador.php?c=funcao" method="POST" target="conteudos"> ID:  <input name="id" type="number" <?php if ($funcao->getId()) echo 'value="'.$funcao->getId().'" readonly' ; else echo "disabled"; ?>  /><!--input class="id-check" type="checkbox" /--> <br /> Nome: <input name="nome" value="<?php echo $funcao->getNome(); ?>" required /> <br /> <input type="submit" value="Submit" /> </form> <br /> <form action="criador.php?c=f" method="POST" target="conteudos"> <input type="submit" value="Pesquisa" /> </form> </div> <?php break; case "comando": case "Comando": $comando = new Comando(); if (isset ($_POST['id'])) $comando = Comando::load( (int) $_POST['id'] ); ?> <div id="comando-form"> <b>Comando:</b> <form action="criador.php?c=comando" method="POST" target="conteudos"> ID:  <input name="id" type="number" <?php if ($comando->getId()) echo 'value="'.$comando->getId().'" readonly' ; else echo "disabled"; ?> /><!--input class="id-check" type="checkbox" /--> <br /> Ordem: <input name="ordem" type="number" value="<?php echo $comando->getOrdem(); ?>" required /> <br /> Função ID: <input name="funcao_id" type="number" value="<?php echo $comando->getFuncaoId(); ?>" required /> <br /> <input type="submit" value="Submit" /> <br /> Comando: <br /> <textarea name="comando" style="width: 100%; height: 150px;"><?php echo $comando->getComando(); ?></textarea> </form> <br /> <form action="criador.php?c=c" method="POST" target="conteudos"> <input type="submit" value="Pesquisa" /> </form> </div> <?php break; case "arquivo": case "Arquivo": $arquivo = new Arquivo(); if (isset ($_POST['id'])) $arquivo = Arquivo::load( (int) $_POST['id'] ); ?> <div id="arquivo-form"> <b>Arquivo:</b> <form action="criador.php?c=arquivo" method="POST" target="conteudos"> ID:  <input name="id" type="number" <?php if ($arquivo->getId()) echo 'value="'.$arquivo->getId().'" readonly' ; else echo "disabled"; ?> /> <!--input class="id-check" type="checkbox" /--> <br /> Nome: <input name="nome" value="<?php echo $arquivo->getNome(); ?>" /> <br /> Função ID:<input name="funcao_id" type="number" value="<?php  echo $arquivo->getFuncaoId(); ?>" required /> <br /> <input type="submit" value="Submit" /> <br /> Conteudo: <br /> <textarea name="conteudo" style="width: 100%; height: 150px;"><?php echo $arquivo->getConteudo(); ?></textarea> </form> <br /> <form action="criador.php?c=a" method="POST" target="conteudos"> <input type="submit" value="Pesquisa" /> </form> </div> <?php break; case "criar": ?> <div> <b>Criar:</b> <form id="form-criar" action="criador.php?c=criar" method="POST" target="conteudos"> Função: <select name="funcao_id"> <?php foreach (Funcao::all() as $funcao) echo "<option value=\"".$funcao->getId()."\">".$funcao->getNome()."</option>"; ?> </select> <br /> Classe: <input name="classe" required /> <br /> <input id="campos-hidden" type="hidden" name="campos" /> </form> <br /> </div> <div> <button onclick="var tr = document.createElement('tr');tr.innerHTML = campoTr; tr.className = 'campo-tr'; document.getElementById('form-edit-campos').getElementsByTagName('tbody')[0].appendChild(tr);">Novo Campo</button> <input type="submit" form="form-edit-campos" onclick="btSub = 'UP'" value="Upar" /> <input type="submit" form="form-edit-campos" onclick="btSub = 'SQL'" value="SQL" /> <button onclick="if ( document.getElementById('load-table').style.display == 'none' ) { document.getElementById('load-table').style.display = 'block'; document.getElementById('form-edit-campos').style.display = 'none';} else { document.getElementById('load-table').style.display = 'none'; document.getElementById('form-edit-campos').style.display = 'block'}">Load</button> <form id="form-edit-campos"> <table class="table-bordered"> <thead> <tr> <th>Tipo</th><th>Nome</th><th>Required</th><th>Options</th><th>X</th> </tr> </thead> <tbody> <?php echo Campo::getCampoId()->toForm(true); ?> </tbody> </table> </form> <form id="load-table" style="display: none;"> <table class="table-bordered"> <tbody> <tr><td>Table:</td><td><input name="table" type="text" required /></td></tr> <tr><td>Database:</td><td><input name="database" type="text" required value="<?php echo DataBaseConfig::BANCO ; ?>" /></td></tr> <tr><td>Host:</td><td><input name="host" type="text" required value="<?php echo DataBaseConfig::HOST ; ?>" /></td></tr> <tr><td>Port:</td><td><input name="port" type="text" required value="<?php echo DataBaseConfig::PORT ; ?>" /></td></tr> <tr><td>User:</td><td><input name="user" type="text" required value="<?php echo DataBaseConfig::USER ; ?>" /></td></tr> <tr><td>Password:</td><td><input name="pass" type="password" value="<?php echo DataBaseConfig::PASS ; ?>" /></td></tr> </tbody> </table> <input id="campos-hidden-load" type="hidden" name="campos" /> <input type="submit" value="Load" /> </form> </div> <script> var btSub = null; var Campo; var Desc; Campo = (function (){ function Campo(tipo, nome, required, options) { this.tipo = tipo; this.nome = nome; this.required = required; this.options = options; } Campo.extract = function (tr) { var tipo = tr.getElementsByClassName("campo-tipo")[0].value; var options = null; if (tipo == 'enum') { options = []; tdOp = tr.getElementsByClassName("campo-options"); for (var i = 0; i < tdOp.length; i++) options.push(tdOp[i].value); } return new Campo( tipo, tr.getElementsByClassName("campo-nome")[0].value, tr.getElementsByClassName("campo-required")[0].checked, options ); }; Campo.extracts = function (trs) { var campos = []; for (var i = 0; i < trs.length; i++) campos.push(Campo.extract(trs[i])); return campos; }; Campo.convert = function (descs) { var campos = []; for (var i = 0; i < descs.length; i++){ var tipo; switch (descs[i].type.toUpperCase()) { case 'TINYTEXT': case 'TEXT': case 'MEDIUMTEXT': case 'LONGTEXT': tipo = "text"; break; case 'DECIMAL': case 'FLOAT': case 'DOUBLE': case 'REAL': case 'NUMBER': tipo = "number"; break; case 'SMALLINT': case 'MEDIUMINT': case 'INT': case 'BIGINT': case 'SERIAL': tipo = "int"; break; case 'TINYINT': case 'BIT': case 'BOOLEAN': tipo = "boolean"; break; case 'DATE': case 'YEAR': tipo = "date"; break; case 'TIME': tipo = "time"; break; case 'ENUM': case 'SET': tipo = "enum"; break; default: tipo = "default"; } campos.push(new Campo(tipo, descs[i].field, !descs[i].null, descs[i].typeProps)); } return campos; }; return Campo; })(); Desc = (function (){ function Desc(data) { this.field = data["Field"]; var indexProps = data["Type"].indexOf('('); if (indexProps < 0) { this.type = data["Type"]; this.typeProps = null; } else { this.type = data["Type"].slice(0,indexProps); this.typeProps = data["Type"].indexOf(',') < 0 ? [ eval(data["Type"].slice(indexProps)) ] : ( eval("Array" + data["Type"].slice(indexProps)) ); } this.null = data["Null"] == "YES" ? true : (data["Null"] == "NO" ? false : null); this.key = data["Key"]; this.default = data["Default"]; this.extra = data["Extra"]; } Desc.extract = function (datas) { var descs = []; for (var i = 0; i < datas.length; i++) descs.push(new Desc (datas[i]) ); return descs; }; return Desc; })(); function campoEnumCarregaOptions(td, values) { td.innerHTML = campoEnumTr; if (!values) return; var tbody = td.getElementsByTagName('tbody')[0]; tbody.getElementsByClassName("campo-options")[0].value = values[0]; for (var i = 1; i < values.length; i++) { var tr = document.createElement('tr'); tr.innerHTML = '<?php echo Campo::getCampoDefault()->toEnumTrForm(); ?>'; tr.className = 'campo-enum-tr'; tr.getElementsByClassName("campo-options")[0].value = values[i]; tbody.appendChild(tr); } } function campoEnumTrAcaoBotaoAdd(event, botao) { event.preventDefault(); var tr = document.createElement('tr'); tr.innerHTML = '<?php echo Campo::getCampoDefault()->toEnumTrForm(); ?>'; tr.className = 'campo-enum-tr'; botao.parentElement.parentElement.parentElement.appendChild(tr); } function campoEnumTrAcaoBotaoRemove(event, botao) { event.preventDefault(); botao.parentElement.parentElement.remove() } function campoTipoChange(event) { if(event.target.value == "enum") event.target.parentElement.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML = campoEnumTr; else event.target.parentElement.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML = ''; } var campoTr = '<?php echo Campo::getCampoDefault()->toForm(); ?>'; var campoEnumTr = '<?php echo Campo::getCampoDefault()->toEnumForm(); ?>'; document.getElementById("form-edit-campos").onsubmit = function(ev){ ev.preventDefault(); if (this.reportValidity()) { var campos = Campo.extracts(this.getElementsByClassName('campo-tr')); switch (btSub) { case "UP": console.log ( JSON.stringify( campos ) ) ; document.getElementById("campos-hidden").value = JSON.stringify(campos); var formCriar = document.getElementById("form-criar"); formCriar.setAttribute("action","criador.php?c=criar"); if (formCriar.reportValidity()) formCriar.submit(); break; case "SQL": document.getElementById("campos-hidden").value = JSON.stringify(campos); var formCriar = document.getElementById("form-criar"); formCriar.setAttribute("action","criador.php?c=sql"); if (formCriar.reportValidity()) formCriar.submit(); break; } } }; document.getElementById("load-table").onsubmit = function(ev){ ev.preventDefault(); if (this.reportValidity()) { var xhr = new XMLHttpRequest(); var data = new FormData(this); data.append('ajax',true); xhr.open('POST', 'criador.php?c=getSQL', false); xhr.send(data); var campos = Campo.convert(Desc.extract(JSON.parse(xhr.responseText))); document.getElementById("campos-hidden-load").value = JSON.stringify(campos); data = new FormData(this); data.append('ajax',true); xhr.open('POST', 'criador.php?c=getCampos', false); xhr.send(data); var trHTMLs = JSON.parse(xhr.responseText); var tbody = document.getElementById('form-edit-campos').getElementsByTagName('tbody')[0]; tbody.innerHTML = ""; for (var i = 0; i < trHTMLs.length; i++) { var tr = document.createElement('tr'); tr.innerHTML = trHTMLs[i]; if (campos[i].nome != 'id') tr.className = 'campo-tr'; if(campos[i].tipo == "enum"){ campoEnumCarregaOptions(tr.childNodes[3],campos[i].options); } tbody.appendChild(tr); } document.getElementById('load-table').style.display = 'none'; document.getElementById('form-edit-campos').style.display = 'block'; } }; </script> <?php break; } } ?> </body> <?php break; } } else { ?> <frameset title="Criador" cols="20%,80%" > <frameset rows="80,*"> <frame name="principal" src="criador.php?c=main"> <frame name="paineis" src="criador.php?c=submain" > </frameset> <frame name="conteudos" src="criador.php?c=submain"> </frameset> <?php } if ( !isset($_POST['ajax']) || strtolower($_POST['ajax']) == "false" || !$_POST['ajax']) echo "</html>"; ?> 